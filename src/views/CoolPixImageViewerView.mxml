<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		title="ImageViewer"
		initialize="init()"  
		viewActivate="onViewActive()"
		viewDeactivate="onViewDeactive()"				
		>	
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.primitives.BitmapImage;
			
			private var current_link:String = "";
			private var urlXMLLoader:URLLoader;
			private var urlImageLoader:URLLoader;
			private var imageRefresh:Timer;
			private var camClickSound:Sound;
			private var imageRefreshCountDownSec:int;
			private var imageRefreshMinuteValue:int = 1;
			private var imageRefreshShowCountdown:Boolean = false;
					
			private function init():void
			{				
				trace("OS Version " + flash.system.Capabilities.version.toLowerCase());
				//ios 10,2,153,1
				var os_parts:Array = flash.system.Capabilities.version.toLowerCase().split(' ');
				switch( os_parts[0] )
				{
					case "ios" :
						trace("Running on iOS");
						break;
					case "and" :
						trace("Running on Android");
						break;
					case "qnx" :
						trace("Running on Blackberry");
						break;
					default :
						break;
				}
				trace("Screen (" + flash.system.Capabilities.screenResolutionX + "x" + flash.system.Capabilities.screenResolutionY + ")");
				
				// can we add to the camera roll
				if ( CameraRoll.supportsAddBitmapData )
				{					
					camClickSound = new Sound();
					camClickSound.load(new URLRequest("assets/camera_click.mp3")) ;
					camClickSound.addEventListener(Event.COMPLETE,onSoundCameraClickLoad);
				}
				else
				{
					imageCamera.visible = false;					
				}
				
				addEventListener(TransformGestureEvent.GESTURE_SWIPE, onSwipe);
				addEventListener(MouseEvent.CLICK,onMouseClick);
				addEventListener(MouseEvent.DOUBLE_CLICK,onMouseClick);					
				
				imageTitle.addEventListener(MouseEvent.CLICK,onMouseImageTitle);
				
				urlXMLLoader = new URLLoader();			
			
				urlXMLLoader.addEventListener(Event.COMPLETE,onXMLLoaderEvent);				
				urlXMLLoader.addEventListener(Event.OPEN, onXMLLoaderEvent);
				urlXMLLoader.addEventListener(HTTPStatusEvent.HTTP_STATUS, onXMLLoaderEvent);
				urlXMLLoader.addEventListener(IOErrorEvent.IO_ERROR, onXMLLoaderEvent);
				urlXMLLoader.addEventListener(ProgressEvent.PROGRESS, onXMLLoaderEvent);
				urlXMLLoader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onXMLLoaderEvent);

				urlImageLoader = new URLLoader();
				urlImageLoader.dataFormat = URLLoaderDataFormat.BINARY
				urlImageLoader.addEventListener(Event.COMPLETE,onImageLoaderEvent);				
				urlImageLoader.addEventListener(Event.OPEN, onImageLoaderEvent);
				urlImageLoader.addEventListener(HTTPStatusEvent.HTTP_STATUS, onImageLoaderEvent);
				urlImageLoader.addEventListener(IOErrorEvent.IO_ERROR, onImageLoaderEvent);
				urlImageLoader.addEventListener(ProgressEvent.PROGRESS, onImageLoaderEvent);
				urlImageLoader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onImageLoaderEvent);
								
				// where are getting the images from
				// load the saved config file
				var f:File = File.applicationStorageDirectory.resolvePath("imagesource.txt");
				
				
				if ( f.exists  )
				{
					var stream:FileStream = new FileStream();
					
					stream.open(f,FileMode.READ);
					var data:Object = stream.readObject();
					stream.close();		
					arraySources = data["urls"];
					imageRefreshMinuteValue = Math.min(60,Math.max(1,data["interval"]));
					
					// need to add user select urs
					var user:String  = data["textUserSelected"];
					
					if ( user && user.length > 0 )
					{
						var user_urls:Array = user.split(',');
						
						if ( user_urls )
						{
							for(var i:int;i<user_urls.length;i++)
							{
								if ( user_urls[i] && user_urls[i].toString().length > 0 )
								{
									arraySources.unshift("http://www.reddit.com/r/"+user_urls[i].toString() +"/.xml");								
								}
							}
						} // split
					} // if user
				}
				
				imageRefreshCountDownSec = imageRefreshMinuteValue * 60; 
				
				if ( arraySources.length == 0 )
				{
					arraySources.unshift("http://www.reddit.com/r/catpictures/.xml");
					arraySources.unshift("http://www.reddit.com/r/pics/.xml");
					arraySources.unshift("http://www.reddit.com/r/earthporn.xml");
				}
				// timer to refresh/update
				var td:Date = new Date();
				trace(td.toString() + ":Starting with " + arraySources.length + " sources at " + imageRefreshMinuteValue + " mins"); 
				imageRefresh = new Timer(1000); // once a second run forever
				imageRefresh.addEventListener(TimerEvent.TIMER,onImageRefreshTimer);
			}
			
			protected function onSoundCameraClickLoad(evt:Event):void
			{
				imageCamera.visible = true;			
			}
			protected function onViewActive():void
			{// view active			
				if ( arrayImages.length == 0 )
				{
					updateImage();
				}
				else
				{
					imageRefresh.start();
				}
			}			
			
			private function onViewDeactive():void
			{
				imageRefresh.stop();				
			}
			private function onMouseClick(event:MouseEvent):void
			{	
				trace("Mouse click " + event);				
				switch ( event.type )
				{
					case MouseEvent.CLICK :
					{
						var offsetX:int = 0;
						
						// simulate swipe on windows
						if (event.ctrlKey)
						{
							offsetX = 1;
						}
						else if ( event.altKey )
						{
							offsetX = -1;
						}
						
						// do want to swipe or not
						if (offsetX != 0 )
						{
							var ev:TransformGestureEvent = new TransformGestureEvent(TransformGestureEvent.GESTURE_SWIPE,true,true,null,0,0,0,0,0,offsetX); 
							
							onSwipe(ev);
						}
						break;
					}
					default :
						break;
				}
				//new SlideViewTransition( 300, SlideViewTransition.SLIDE_LEFT ) );
			}
			
			private function onSwipe(event:TransformGestureEvent):void
			{
				trace("Swipe gesture " + event );
				// left or right
				if( event.offsetX == 1 )
				{// right				
					// move to next group of images
					arrayImages.length = 0; // clear it out
					updateImage();
				}
				else if (event.offsetX == -1 )
				{// left			
					updateImage()
				}				
			}
			protected function parseItem(item:XMLList):Object
			{
				var rc:Object = new Object();
				// title item[0].text()[0]
				// link  item[1].text()[0]
				// image item[4].text()[0] // need to parse for [link]
				//       <a href="http://i.imgur.com/srd4T.jpg">[link]</a>
				rc.title  = item[0].text()[0].toString();
				rc.link   = item[1].text()[0].toString();
				rc.image  = null;
				
				// now to parse for the image, it is html
				var partsImage:Array = item[4].toString().split("<"); 
				for(var i:int=0;i<partsImage.length;i++)
				{
					// look the <a with [link] in it
					if ( partsImage[i].indexOf("[link]") != -1 )
					{
						var tags:Array = partsImage[i].split("\"");
						
						if ( tags.length > 1 )
						{
							rc.image = tags[1].toString();
							break;// we are looking for
						} // valid parse
					}					
				} // for
				
				if (rc.image )
				{
					// make sure valid image
					var lowerStr:String = rc.image.toString().toLowerCase();
					
					if ( lowerStr.indexOf(".jpeg") != -1 ||
						 lowerStr.indexOf(".jpg") != -1 ||
						 lowerStr.indexOf(".png") != -1 )
					{
						return rc;
					}
					else if (lowerStr.indexOf("http://imgur.com/") == 0 && (lowerStr.indexOf(",") == -1 || lowerStr.indexOf("#") == -1 ) )
					{
						rc.image += ".jpg";
					}
					else if ( item.length() >=7 )
					{
						var imageParts:Array = item[6].toXMLString().toString().split("\"");
						
						if ( imageParts.length >= 1 && imageParts[0].toString().toLowerCase().indexOf("media:thumbnail") != 0 )
						{
							rc.image = imageParts[1].toString();
						}
						else
							rc = null;
					}					
					else
					{					
						
						trace("Not valid image ext " + lowerStr );
						rc = null;
					}					
				}
				else
				{
					//delete rc;
					rc = null;
				}
				
				return rc;
			}
			
			protected function updateImage():void
			{
				trace("Image array " + arrayImages.length);
				if ( arrayImages.length > 0 )
				{
					var item:Object = arrayImages.pop(); // the list was reversed when added
				
					imageLoadStatus.text = "0";
					imageRefreshCountDownSec = imageRefreshMinuteValue * 60;
					// set the title					
					imageTitle.text = item.title;// + " " + arrayImages.length.toString();					
					
					// set the image
					urlImageLoader.load( new URLRequest(item.image) )
					//imagePicture.source = item.image;					
					current_link = item.link;
					
					//delete item;					
					trace("Title[" + item.title +"] Image[" + item.image + "]");
				}
				else if (arraySources.length > 0)
				{
					var url:String = arraySources.pop();
					
					imageRefresh.stop(); // will start up again after downloading new images					
					trace("Fetching image from " + url);
					imageTitle.text = "Fetching group information";
					urlXMLLoader.load(new URLRequest(url) );					
					arraySources.unshift(url);					
				}					
			}
			
			public function onImageRefreshTimer(event:TimerEvent):void
			{
				imageRefreshCountDownSec--;
				trace("Update image in " + imageRefreshCountDownSec + " seconds"); 
				if ( imageRefreshCountDownSec <= 0 )
					updateImage();
				if ( imageRefreshShowCountdown )
				{
					imageLoadStatus.text = imageRefreshCountDownSec.toString();
				}
			}
			
			private function onImageLoaderEvent(evt:Event):void
			{
				//trace("onImageLoaderEvent" + evt);
				switch( evt.type )
				{
					case Event.COMPLETE :
						imagePicture.source = urlImageLoader.data;
						imagePicture.visible = true;						
						imageLoadStatus.text = "";
						imageRefreshCountDownSec = imageRefreshMinuteValue * 60;
						break;
					case Event.OPEN :
						imageLoadStatus.text = "0";
						imagePicture.visible = false;
						break;
					case HTTPStatusEvent.HTTP_STATUS :
						break;
					case SecurityErrorEvent.SECURITY_ERROR :
					case IOErrorEvent.IO_ERROR :
						imageTitle.text = "Could not load image, moving to next one";
						imageRefreshCountDownSec = 3;
						break;
					case ProgressEvent.PROGRESS : // ProgressEvent
						var proEvt:ProgressEvent = evt as ProgressEvent;
						var percent:int = ((proEvt.bytesLoaded/ proEvt.bytesTotal)*100.0);
						imageLoadStatus.text = percent.toString();						  
						break;
					default :
						break;
				} // switch
			}
			
			private function onXMLLoaderEvent(evt:Event):void
			{
				//trace("onXMLLoaderEvent" + evt);
				switch( evt.type )
				{
					case Event.COMPLETE :
						// start the parse	
						//trace("Data = " + urlXMLLoader.data );
						var xml:XML = new XML(urlXMLLoader.data);										
						
						var children:XMLList = xml.children()[0].children();
						for(var i:int=0; i<children.length(); i++)
						{
							if ( children[i].children().length() >= 5 )
							{
								var obj:Object = parseItem(children[i].children());
								
								if ( obj )
									arrayImages.push(obj);
							}
						} // for
						arrayImages.reverse();
						trace("Found " + arrayImages.length + " images");
						imageRefresh.start();						
						updateImage();						
						break;
					case Event.OPEN :
						imagePicture.visible = false;
						break;
					case HTTPStatusEvent.HTTP_STATUS :
						break;
					case SecurityErrorEvent.SECURITY_ERROR :
					case IOErrorEvent.IO_ERROR :
						// start the next one!
						imageTitle.text = "Error loading, moving to next image";
						updateImage();
						break;
					case ProgressEvent.PROGRESS : // ProgressEvent
						var proEvt:ProgressEvent = evt as ProgressEvent;
						var percent:int = ((proEvt.bytesLoaded/ proEvt.bytesTotal)*100.0);						
						imageTitle.text = "Loading " + percent;						  
						break;
					default :
						break;
				} // switch
			} // doEvent
			
			protected function onMouseImageTitle(event:MouseEvent):void
			{
				try
				{
					navigateToURL(new URLRequest(current_link) ,"_blank");
				}
				catch(e:Error)
				{
					trace("onMouseImageTitle() error " + e);
				}
			}
			
			protected function onConfigClick(event:MouseEvent):void
			{
				navigator.pushView(CoolPixImageConfigView,null);				
			}
			
			protected function onCameraClick(event:MouseEvent):void
			{
				// does device support adding to camera roll
				var cameraRoll:CameraRoll = new CameraRoll();
				var bm:BitmapData= imagePicture.imageDisplay.bitmapData;
				
				try
				{
					imageCamera.visible = false;
					cameraRoll.addEventListener(Event.COMPLETE, function(evt:Event):void
					{
						imageCamera.visible = true;
					});
					cameraRoll.addBitmapData(bm );
					camClickSound.play();
				}
				catch(e:Error)
				{
					trace("Error saving image to camera roll " + e);
				}						
			}
			
			protected function imageLoadStatus_clickHandler(event:MouseEvent):void
			{
				imageRefreshShowCountdown = !imageRefreshShowCountdown;		
				imageLoadStatus.text = "-";
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>			
		<fx:Array id="arrayImages"/>
		<fx:Array id="arraySources"/> 
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:titleContent>
		<s:Label id="imageTitle" x="13" y="14" width="100%" height="100%" color="#FFFFFF"
				 textAlign="center" verticalAlign="middle"/>
	</s:titleContent>
	<s:Rect width="100%" height="100%">
		<s:fill>
			<s:SolidColor color="0x000000"/>
		</s:fill>
	</s:Rect>
	<s:Image id="imagePicture" left="0" right="0" top="0" bottom="0" source="assets/splash.png"/>	
	<s:Image id="imageConfiguration" right="5" bottom="5" width="45" click="onConfigClick(event)"
			 source="assets/info.png"/>
	<s:Label id="imageLoadStatus" 
			 left="50" 
			 right="50" 
			 bottom="5" 
			 height="40"
			 click="imageLoadStatus_clickHandler(event)" color="#FFFFFF" text="Loading"
			 textAlign="center" verticalAlign="middle"/>
	<s:Image id="imageCamera" left="5" bottom="5" width="45" click="onCameraClick(event)"
			 smooth="false" source="assets/camera.png"/>
</s:View>
